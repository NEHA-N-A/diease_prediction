# -*- coding: utf-8 -*-
"""disease prediction_NLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17iiQApjHmzo0c6OlCcgTx_TB1XnILMv7
"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
import pandas as pd
import re

# Load training data
file_path = "/content/WHOLE XL SHEET.xlsx"
training_data = pd.read_excel(file_path)

# Extract symptoms and diseases from training data
SYMPTOMS = training_data['SYMPTOMS'].tolist()
DISEASE = training_data['DISEASE'].tolist()

# Diagnostic methods and treatment steps for possible diseases
diagnostic_methods = {
    'corona virus': 'PCR test, Antigen test, CT scan',
    'alzheimers': 'Cognitive tests, MRI, PET scan',
    'Brain tumour': 'MRI, CT scan, Biopsy',
    'Breast cancer': 'Mammogram, Ultrasound, Biopsy',
    'pneumonia': 'Chest X-ray, Blood tests, Sputum test',
    'Heart disease': 'ECG, Echocardiogram, Stress test',
    'diabetes': 'Blood glucose test, A1C test, Oral glucose tolerance test'
}

treatment_steps = {
    'corona virus': 'Rest, Hydration, Antiviral medications, Oxygen therapy if needed',
    'alzheimers': 'Medications to manage symptoms, Cognitive therapy, Lifestyle changes',
    'Brain tumour': 'Surgery, Radiation therapy, Chemotherapy',
    'Breast cancer': 'Surgery, Radiation therapy, Chemotherapy, Hormone therapy',
    'pneumonia': 'Antibiotics for bacterial pneumonia, Rest, Fluids, Over-the-counter medications',
    'Heart disease': 'Medications, Lifestyle changes, Surgery (e.g., angioplasty, bypass surgery)',
    'diabetes': 'Insulin therapy, Oral medications, Diet and exercise, Regular monitoring of blood sugar levels'
}

# Preprocess symptoms by tokenizing
def preprocess_symptoms(symptoms):
    symptoms = symptoms.lower()
    symptoms = re.sub(r'[^a-zA-Z\s]', '', symptoms)
    return symptoms

SYMPTOMS = [preprocess_symptoms(symptom) for symptom in SYMPTOMS]

# Create a pipeline for vectorizing and training the model
pipeline = Pipeline([
    ('vectorizer', CountVectorizer()),
    ('classifier', RandomForestClassifier())
])

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(SYMPTOMS, DISEASE, test_size=0.2, random_state=42)

# Train the model
pipeline.fit(X_train, y_train)

# Ask user for new symptoms
user_symptoms = input("Enter your symptoms: ")
preprocessed_symptoms = preprocess_symptoms(user_symptoms)
new_symptoms = [preprocessed_symptoms]

# Predict disease for new symptoms
predicted_disease = pipeline.predict(new_symptoms)[0]

# Get diagnostic methods and treatment steps for the predicted disease
diagnostic_method = diagnostic_methods.get(predicted_disease.lower(), "Diagnostic methods not available")
treatment_step = treatment_steps.get(predicted_disease.lower(), "Treatment steps not available")

print("Predicted disease:", predicted_disease)
print("Diagnostic methods:", diagnostic_method)
print("Treatment steps:", treatment_step)